// Generated by CoffeeScript 1.4.0
(function() {
  var makeGraph, makeLink, makeNode, makeSpoke, particles, physics, springs;

  springs = [];

  physics = new Physics;

  particles = [];

  makeNode = function(stats) {
    var angle, angle2, particle, x, x2, y, y2;
    particle = new Particle;
    particles.push(particle);
    angle = (stats.spoke / stats.numSpokes) * Math.PI * 2;
    x = Math.cos(angle);
    y = Math.sin(angle);
    angle2 = (3 / stats.numSpokes) * Math.PI * 2;
    x2 = Math.cos(angle + angle2);
    y2 = Math.sin(angle + angle2);
    particle.pos = new Vector(x, y).scale(100 * (stats.level + 1)).add(new Vector(720, 350)).add(new Vector(x2, y2).scale(stats.i * 10));
    physics.particles.push(particle);
    return particle;
  };

  makeLink = function(a, b) {
    var spring;
    spring = new Spring(a, b, 40, 0.15);
    springs.push(spring);
    physics.springs.push(spring);
    return spring;
  };

  makeSpoke = function(level, spoke, numSpokes, numLevels, fNode, fLink) {
    var a, b, i, nodes, stats, _, _i, _ref;
    stats = {
      level: level
    };
    nodes = (function() {
      var _i, _results;
      _results = [];
      for (_ = _i = 0; 0 <= level ? _i <= level : _i >= level; _ = 0 <= level ? ++_i : --_i) {
        _results.push(fNode({
          level: level,
          spoke: spoke,
          i: _,
          numLevels: numLevels,
          numSpokes: numSpokes
        }));
      }
      return _results;
    })();
    for (i = _i = 0, _ref = nodes.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      a = nodes[i];
      b = nodes[(i + 1) % nodes.length];
      fLink(a, b);
    }
    return {
      nodes: nodes,
      firstNode: nodes[0],
      lastNode: nodes[nodes.length - 1]
    };
  };

  makeGraph = function(numSpokes, numLevels, fNode, fLink) {
    var i, level, nodeA, nodeB, nodeC, parentA, parentB, parentSpokes, spokeA, spokeB, spokes, _, _i, _j, _k, _len, _len1, _ref, _results;
    parentSpokes = (function() {
      var _i, _results;
      _results = [];
      for (_ = _i = 0; 0 <= numSpokes ? _i < numSpokes : _i > numSpokes; _ = 0 <= numSpokes ? ++_i : --_i) {
        _results.push(null);
      }
      return _results;
    })();
    _results = [];
    for (level = _i = 0; 0 <= numLevels ? _i < numLevels : _i > numLevels; level = 0 <= numLevels ? ++_i : --_i) {
      spokes = (function() {
        var _j, _results1;
        _results1 = [];
        for (_ = _j = 0; 0 <= numSpokes ? _j < numSpokes : _j > numSpokes; _ = 0 <= numSpokes ? ++_j : --_j) {
          _results1.push(makeSpoke(level, _, numSpokes, numLevels, fNode, fLink));
        }
        return _results1;
      })();
      for (i = _j = 0, _len = spokes.length; _j < _len; i = ++_j) {
        spokeA = spokes[i];
        spokeB = spokes[(i + 1) % spokes.length];
        fLink(spokeA.lastNode, spokeB.firstNode);
        if (parentB = parentSpokes[(i + 1) % spokes.length]) {
          fLink(spokeA.lastNode, parentB.firstNode);
        }
        if (parentA = parentSpokes[i]) {
          _ref = parentA.nodes;
          for (i = _k = 0, _len1 = _ref.length; _k < _len1; i = ++_k) {
            nodeA = _ref[i];
            nodeB = spokeA.nodes[i];
            nodeC = spokeA.nodes[i + 1];
            fLink(nodeA, nodeB);
            fLink(nodeA, nodeC);
          }
        }
      }
      _results.push(parentSpokes = spokes);
    }
    return _results;
  };

  $(function() {
    var $canvas, $layers, $spokes, $window, ctx, numLayers, numSpokes, update;
    $window = $(window);
    $canvas = $('canvas');
    ctx = $canvas[0].getContext('2d');
    $layers = $('<input type="text">').appendTo('body');
    $spokes = $('<input type="text">').appendTo('body');
    numLayers = new Rx.BehaviorSubject(3);
    numSpokes = new Rx.BehaviorSubject(6);
    $layers.onAsObservable('keyup').select(function(e) {
      return $(e.target).val();
    }).distinctUntilChanged().select(function(text) {
      return parseInt(text);
    }).where(function(n) {
      return isFinite(n) && n > 0 && n <= 12;
    }).subscribe(function(n) {
      return numLayers.onNext(n);
    });
    $spokes.onAsObservable('keyup').select(function(e) {
      return $(e.target).val();
    }).distinctUntilChanged().select(function(text) {
      return parseInt(text);
    }).where(function(n) {
      return isFinite(n) && n > 0 && n <= 100;
    }).subscribe(function(n) {
      return numSpokes.onNext(n);
    });
    numLayers.combineLatest(numSpokes, function(numLayers, numSpokes) {
      return {
        numLayers: numLayers,
        numSpokes: numSpokes
      };
    }).subscribe(function(x) {
      particles = [];
      springs = [];
      physics.particles = [];
      physics.springs = [];
      makeGraph(x.numSpokes, x.numLayers, makeNode, makeLink);
      return console.log(springs.length);
    });
    $(document).onAsObservable('mousemove').select(function(e) {
      return new Vector(e.clientX, e.clientY);
    }).select(function(mousePos) {
      var combos;
      combos = _.map(particles, function(particle) {
        return {
          particle: particle,
          distance: particle.pos.dist(mousePos)
        };
      });
      return combos = _.sortBy(combos, function(combo) {
        return combo.distance;
      });
    }).subscribe(function(combos) {
      return _.each(combos, function(combo, i) {
        if (i === 0) {
          combo.particle.nearMouse = true;
          return combo.particle.veryNearMouse = combo.distance < 15;
        } else {
          combo.particle.nearMouse = false;
          return combo.particle.veryNearMouse = false;
        }
      });
    });
    $(document).onAsObservable('click').select(function(e) {
      return new Vector(e.clientX, e.clientY);
    }).select(function(mousePos) {
      var combos;
      combos = _.map(particles, function(particle) {
        return {
          particle: particle,
          distance: particle.pos.dist(mousePos)
        };
      });
      combos = _.sortBy(combos, function(combo) {
        return combo.distance;
      });
      return combos[0];
    }).subscribe(function(combo) {
      if (combo.distance < 15) {
        console.log('click');
        physics.particles = particles = _.filter(particles, function(particle) {
          return particle !== combo.particle;
        });
        return physics.springs = springs = _.filter(springs, function(spring) {
          return spring.p1 !== combo.particle && spring.p2 !== combo.particle;
        });
      }
    });
    update = function() {
      var p1, p2, particle, spring, _i, _j, _len, _len1;
      physics.step();
      ctx.clearRect(0, 0, $window.width(), $window.height());
      for (_i = 0, _len = springs.length; _i < _len; _i++) {
        spring = springs[_i];
        p1 = spring.p1;
        p2 = spring.p2;
        ctx.strokeStyle = 'rgba(0, 0, 0, 0.25)';
        ctx.beginPath();
        ctx.moveTo(p1.pos.x, p1.pos.y);
        ctx.lineTo(p2.pos.x, p2.pos.y);
        ctx.stroke();
      }
      for (_j = 0, _len1 = particles.length; _j < _len1; _j++) {
        particle = particles[_j];
        ctx.strokeStyle = 'none';
        if (particle.nearMouse) {
          if (particle.veryNearMouse) {
            ctx.fillStyle = 'rgba(0,0,255,0.5)';
          } else {
            ctx.fillStyle = 'rgba(255,0,0,0.5)';
          }
        } else {
          ctx.fillStyle = 'rgba(0,0,0,0.25)';
        }
        ctx.beginPath();
        ctx.arc(particle.pos.x, particle.pos.y, particle.mass * 15, 0, Math.PI * 2);
        ctx.fill();
        ctx.beginPath();
        ctx.fillStyle = 'rgba(255,255,255,1)';
        ctx.arc(particle.pos.x, particle.pos.y, particle.mass * 10, 0, Math.PI * 2);
        ctx.fill();
      }
      return requestAnimationFrame(update);
    };
    return update();
  });

}).call(this);
